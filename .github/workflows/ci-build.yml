name: "CI Build"

on:
  push:
    branches: [ master ]
    paths-ignore:
      - 'website/**'
      - BUILD.md
      - CODE_OF_CONDUCT.md
      - CONTRIBUTING.md
      - README.md
      - latest.json
      - .gitignore
  pull_request:
    branches: [ master ]
    paths-ignore:
      - 'website/**'
      - BUILD.md
      - CODE_OF_CONDUCT.md
      - CONTRIBUTING.md
      - README.md
      - latest.json
      - .gitignore
  workflow_dispatch:

jobs:
  SaveVersion:
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/klogg-version

      - name: Save version 
        run: echo $KLOGG_VERSION > klogg_version.txt

      - uses: actions/upload-artifact@v2
        with:
          name: klogg_version
          path: 'klogg_version.txt'
          if-no-files-found: error

  Linux:
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    strategy:
      fail-fast: false
      matrix:
        config:

          - os: oraclelinux
            os_version: 8
            arch: x64
            check_command: yum install -y --setopt tsflags=test /usr/local/klogg*.rpm
            cpack_gen: RPM
            artifacts_id: oracle
            package_suffix: rpm
            check_container: oraclelinux:8
            container_root: docker/oracle8
            container: variar/klogg_oracle8
            cmake_opts: -DCMAKE_BUILD_WITH_INSTALL_RPATH=on

          - os: ubuntu_bionic
            os_version: 18.04
            arch: x64
            check_command: apt-get update && apt install --dry-run /usr/local/klogg*.deb
            cpack_gen: DEB
            artifacts_id: bionic
            package_suffix: deb
            check_container: ubuntu:18.04
            container_root: docker/ubuntu18.04
            container: variar/klogg_ubuntu18.04
            cmake_opts: -DKLOGG_USE_LTO=OFF

          - os: ubuntu_focal
            os_version: 20.04
            arch: x64
            check_command: apt-get update && apt install --dry-run /usr/local/klogg*.deb
            cpack_gen: DEB
            artifacts_id: focal
            package_suffix: deb
            check_container: ubuntu:20.04
            container_root: docker/ubuntu20.04
            container: variar/klogg_ubuntu20.04
            cmake_opts:

          - os: ubuntu_appimage
            os_version: 18.04
            arch: x64
            #check_command: apt-get update && apt install --dry-run /usr/local/klogg*.deb
            #cpack_gen: DEB
            artifacts_id: appimage
            package_suffix: AppImage
            #check_container: ubuntu:18.04
            container_root: docker/ubuntu18.04_qt5.15
            container: variar/klogg_ubuntu18.04_qt5.15
            cmake_opts: -DKLOGG_USE_LTO=OFF -DCMAKE_PREFIX_PATH=/opt/qt515/


    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2

      - uses: satackey/action-docker-layer-caching@v0.0.11
        # Ignore the failure of a step and avoid terminating the job.
        continue-on-error: true
      
      - name: Build container 
        run: |
          cd ${{ matrix.config.container_root }}
          docker build -t ${{ matrix.config.container }} .

      - uses: ./.github/actions/prepare-boost
      - uses: ./.github/actions/klogg-version
      - uses: ./.github/actions/prepare-workspace-env
      - uses: ./.github/actions/docker-build
      - uses: ./.github/actions/docker-run-tests

      - name: package
        if: ${{ matrix.config.cpack_gen }}
        run: |
          docker run -v "$KLOGG_WORKSPACE":/usr/local ${{ matrix.config.container }} /bin/bash -c "cd /usr/local/build_root && cpack -G ${{ matrix.config.cpack_gen }} "
          docker run --env KLOGG_VERSION=$KLOGG_VERSION -v "$KLOGG_WORKSPACE":/usr/local ${{ matrix.config.container }} /bin/bash -c "cd /usr/local/build_root && mv ./packages/klogg-$KLOGG_VERSION-Linux.${{ matrix.config.package_suffix }} ./packages/klogg-$KLOGG_VERSION-${{ matrix.config.artifacts_id }}.${{ matrix.config.package_suffix }}"
          docker run --env KLOGG_VERSION=$KLOGG_VERSION -v "$KLOGG_WORKSPACE":/usr/local ${{ matrix.config.container }} /bin/bash -c "cd /usr/local/build_root && mv ./packages/klogg-$KLOGG_VERSION-Linux.${{ matrix.config.package_suffix }}.sha256 ./packages/klogg-$KLOGG_VERSION-${{ matrix.config.artifacts_id }}.${{ matrix.config.package_suffix }}.sha256"

      - name: Check package
        if: ${{ matrix.config.check_command }}
        run: |
          docker run --rm -v "$KLOGG_WORKSPACE/$KLOGG_BUILD_ROOT/packages":/usr/local ${{ matrix.config.check_container }} /bin/bash -c "${{ matrix.config.check_command }}"
    
      - name: Linux AppImage 
        if: ${{ matrix.config.os == 'ubuntu_appimage' }}
        run: |
          docker run --device /dev/fuse --privileged --env KLOGG_VERSION=$KLOGG_VERSION -v "$KLOGG_WORKSPACE":/usr/local ${{ matrix.config.container }} /bin/bash -c "cd /usr/local/build_root && ../packaging/linux/appimage/generate_appimage.sh"

      - name: Copy sym
        run: |
          docker run -v "$KLOGG_WORKSPACE":/usr/local ${{ matrix.config.container }} /bin/bash -c "cd /usr/local/build_root && cp ./output/klogg.sym ./packages/klogg_${{ matrix.config.artifacts_id }}.sym"

      - name: Copy deps
        if: ${{ matrix.config.os == 'ubuntu_appimage' }}
        run: |
          docker run -v "$KLOGG_WORKSPACE":/usr/local ${{ matrix.config.container }} /bin/bash -c "cd /usr/local && tar -czvf ./build_root/packages/klogg_deps.tar.gz ./cpm_cache"

          
# Final upload of all packages
      - uses: actions/upload-artifact@v2
        with:
          name: packages-${{ matrix.config.artifacts_id }}-${{ matrix.config.arch }}
          path: '${{ env.KLOGG_BUILD_ROOT }}/packages/*'
          if-no-files-found: error      

  Mac:
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    strategy:
      fail-fast: false
      matrix:
        config:
          - os: macos
            os_version: latest
            qt_version: 5.15.2
            arch: x64
            cmake_opts:

    runs-on: ${{ matrix.config.os }}-${{ matrix.config.os_version }}
    steps:
      - uses: actions/checkout@v2

      - name: Mac prepare codesign
        id: prepare-codesign
        if: ${{ github.event_name != 'pull_request' }} 
        uses: apple-actions/import-codesign-certs@v1
        with: 
          p12-file-base64: ${{ secrets.CODESIGN_BASE64 }}
          p12-password: ${{ secrets.CODESIGN_PASSWORD }}
      
#Install build deps
      - uses: seanmiddleditch/gha-setup-ninja@master

      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ../Qt
          key: ${{ matrix.config.os }}-${{ matrix.config.arch }}-${{ matrix.config.qt_version }}-QtCache

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ matrix.config.qt_version }}
          arch: ${{ matrix.config.qt_arch }}
          cached: ${{ steps.cache-qt.outputs.cache-hit }}

      - name: Set brew env
        run: |
          echo "HOMEBREW_NO_ANALYTICS=1" >> $GITHUB_ENV
          echo "HOMEBREW_NO_AUTO_UPDATE=1" >> $GITHUB_ENV
          echo "HOMEBREW_NO_INSTALL_CLEANUP=1" >> $GITHUB_ENV

      - name: Brew deps
        run: |
          brew install ragel
      
      - uses: ./.github/actions/prepare-boost

#Build and test
      - uses: ./.github/actions/klogg-version
      - uses: ./.github/actions/prepare-workspace-env
      - uses: ./.github/actions/agent-build
      - uses: ./.github/actions/agent-run-tests

#Package
      - name: Mac deploy Qt
        run: |
          cd $KLOGG_BUILD_ROOT
          macdeployqt ./output/klogg.app -always-overwrite -verbose=2

      - name: Mac deploy Qt fixing
        run: |
          python2 $KLOGG_BUILD_ROOT/macdeployqtfix.py $KLOGG_BUILD_ROOT/output/klogg.app/Contents/MacOS/klogg $Qt5_Dir
      
      - name: Mac codesign binaries
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          cd $KLOGG_BUILD_ROOT
          codesign -v -f -o runtime --deep --timestamp -s "Developer ID Application: Anton Filimonov (GAW773U324)" ./output/klogg.app;
      
      - name: Mac pack dmg
        run: |
          cd $KLOGG_BUILD_ROOT
          cpack --verbose -G "DragNDrop"

      - name: Mac codesign dmg
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          cd $KLOGG_BUILD_ROOT
          codesign -v -f -o runtime --timestamp -s "Developer ID Application: Anton Filimonov (GAW773U324)" ./packages/*
          
      - name: "Mac notarize DMG"
        if: ${{ github.event_name != 'pull_request' }} 
        uses: variar/xcode-notarize@v1.0.3
        with:
          verbose: true
          product-path: "${{ env.KLOGG_BUILD_ROOT }}/packages/klogg-${{ env.KLOGG_VERSION }}-OSX.dmg"
          primary-bundle-id: "dev.filimonov.klogg"
          appstore-connect-username: ${{ secrets.NOTARIZATION_USERNAME }}
          appstore-connect-password: ${{ secrets.NOTARIZATION_PASSWORD }}

      - name: "Mac staple DMG"
        if: ${{ github.event_name != 'pull_request' }} 
        uses: devbotsxyz/xcode-staple@v1
        with:
          product-path: "${{ env.KLOGG_BUILD_ROOT }}/packages/klogg-${{ env.KLOGG_VERSION }}-OSX.dmg"

      - name: "Mac build pkg"
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          cd $KLOGG_BUILD_ROOT
          mkdir -p pkg_resources/en.lproj
          cp ../COPYING pkg_resources/en.lproj
          cp ../packaging/description.txt pkg_resources/en.lproj
          sed -e s/%klogg_version%/${{ env.KLOGG_VERSION }}/ -e s/%klogg_pkg%/klogg-${{ env.KLOGG_VERSION }}-OSX.pkg/ ../packaging/osx/distribution.xml > distribution.xml
          pkgbuild --component ./output/klogg.app --install-location /Applications --version ${{ env.KLOGG_VERSION }} --sign "Developer ID Installer: Anton Filimonov (GAW773U324)" --timestamp ./output/klogg-${{ env.KLOGG_VERSION }}-OSX.pkg
          productbuild --package-path ./output --distribution distribution.xml --resources ./pkg_resources --sign "Developer ID Installer: Anton Filimonov (GAW773U324)" --timestamp ./output/klogg-${{ env.KLOGG_VERSION }}-OSX-product.pkg
          pkgutil --expand ./output/klogg-${{ env.KLOGG_VERSION }}-OSX-product.pkg ./output/klogg_product_pkg
          pkgutil --flatten ./output/klogg_product_pkg ./output/klogg-${{ env.KLOGG_VERSION }}-OSX-flatten.pkg
          productsign --sign "Developer ID Installer: Anton Filimonov (GAW773U324)" --timestamp ./output/klogg-${{ env.KLOGG_VERSION }}-OSX-flatten.pkg ./packages/klogg-${{ env.KLOGG_VERSION }}-OSX.pkg

      - name: "Mac notarize PKG"
        if: ${{ github.event_name != 'pull_request' }} 
        uses: variar/xcode-notarize@v1.0.3
        with:
          verbose: true
          product-path: "${{ env.KLOGG_BUILD_ROOT }}/packages/klogg-${{ env.KLOGG_VERSION }}-OSX.pkg"
          primary-bundle-id: "dev.filimonov.klogg"
          appstore-connect-username: ${{ secrets.NOTARIZATION_USERNAME }}
          appstore-connect-password: ${{ secrets.NOTARIZATION_PASSWORD }}

      - name: "Mac staple PKG"
        if: ${{ github.event_name != 'pull_request' }} 
        uses: devbotsxyz/xcode-staple@v1
        with:
          product-path: "${{ env.KLOGG_BUILD_ROOT }}/packages/klogg-${{ env.KLOGG_VERSION }}-OSX.pkg"         

      - name: Mac symbols
        run: |
          cd $KLOGG_BUILD_ROOT
          cp -a ./output/klogg.dSym ./packages/
          cp -a ./output/klogg.app ./packages/

# Final upload of all packages
      - uses: actions/upload-artifact@v2
        with:
          name: packages-${{ matrix.config.os }}-${{ matrix.config.arch }}
          path: '${{ env.KLOGG_BUILD_ROOT }}/packages/*' 
          if-no-files-found: error

  Windows:
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    strategy:
      fail-fast: false
      matrix:
        config:
          - os: windows
            os_version: 2019
            qt_version: 5.15.2
            arch: x64
            ssl_arch: -x64
            cmake_opts:

          - os: windows
            os_version: 2019
            qt_version: 5.15.2
            arch: x86
            qt_arch: win32_msvc2019
            cmake_opts:

    runs-on: ${{ matrix.config.os }}-${{ matrix.config.os_version }}
    steps:
      - uses: actions/checkout@v2

#Install build deps
      - uses: seanmiddleditch/gha-setup-ninja@master

      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ../Qt
          key: ${{ matrix.config.os }}-${{ matrix.config.arch }}-${{ matrix.config.qt_version }}-QtCache

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ matrix.config.qt_version }}
          arch: ${{ matrix.config.qt_arch }}
          cached: ${{ steps.cache-qt.outputs.cache-hit }}

      - name: Cache openssl
        id: cache-openssl
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}\openssl-1.1
          key: OpensslCache-1-1-1n

      - name: Download openssl
        if: ${{ steps.cache-openssl.outputs.cache-hit != 'true' }} 
        run: |
          Invoke-WebRequest -Uri "https://mirror.firedaemon.com/OpenSSL/openssl-1.1.1n.zip" -OutFile openssl.zip
          7z x openssl.zip 

      - name: Set openssl paths
        shell: sh
        run: |
          echo "SSL_DIR=${{ github.workspace }}\openssl-1.1\${{ matrix.config.arch }}\bin" >> $GITHUB_ENV
          echo "SSL_ARCH=${{ matrix.config.ssl_arch }}" >> $GITHUB_ENV 

      - uses: ./.github/actions/prepare-boost
     
#Build and test
      - name: Prepare dev cmd
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.config.arch }}

      - uses: ./.github/actions/klogg-version
      - uses: ./.github/actions/prepare-workspace-env
      - uses: ./.github/actions/agent-build
      - uses: ./.github/actions/agent-run-tests

#Package
      - name: Setup codesing env
        if: ${{ github.event_name != 'pull_request' }}
        shell: sh
        run: |
          echo "CS_CLIENT_S3_KEY_ID=${{ secrets.WIN_CS_KEY_ID }}" >> $GITHUB_ENV 
          echo "CS_CLIENT_S3_SECRET=${{ secrets.WIN_CS_SECRET }}" >> $GITHUB_ENV 
          echo "CS_CLIENT_S3_BUCKET=${{ secrets.WIN_CS_BUCKET }}" >> $GITHUB_ENV 
      
      - name: Win codesign executables
        if: ${{ github.event_name != 'pull_request' }}
        shell: cmd
        run: |
          packaging\windows\codesign_client.exe --debug %KLOGG_BUILD_ROOT%\output\klogg.exe
          packaging\windows\codesign_client.exe --debug %KLOGG_BUILD_ROOT%\output\klogg_portable.exe
          packaging\windows\codesign_client.exe --debug %KLOGG_BUILD_ROOT%\output\klogg_crashpad_handler.exe
          packaging\windows\codesign_client.exe --debug %KLOGG_BUILD_ROOT%\output\klogg_minidump_dump.exe
          packaging\windows\codesign_client.exe --debug %KLOGG_BUILD_ROOT%\output\tbb12.dll
          packaging\windows\codesign_client.exe --debug %KLOGG_BUILD_ROOT%\output\tbbmalloc.dll
          packaging\windows\codesign_client.exe --debug %KLOGG_BUILD_ROOT%\output\tbbmalloc_proxy.dll
      

      - name: Win portable
        shell: cmd
        run: |
          packaging\windows\prepare_release.cmd

      - name: Win installer
        uses: joncloud/makensis-action@v3.3
        with:
          script-file: klogg.nsi
          arguments: "-DVERSION=%KLOGG_VERSION% -DPLATFORM=%KLOGG_ARCH%"

      - name: Win package
        shell: cmd
        run: |
          md %KLOGG_BUILD_ROOT%\packages
          xcopy klogg-%KLOGG_VERSION%-%KLOGG_ARCH%-portable.zip %KLOGG_BUILD_ROOT%\packages\ /y
          xcopy klogg-%KLOGG_VERSION%-%KLOGG_ARCH%-pdb.zip %KLOGG_BUILD_ROOT%\packages\ /y
          xcopy klogg-%KLOGG_VERSION%-%KLOGG_ARCH%-setup.exe %KLOGG_BUILD_ROOT%\packages\ /y

      - name: Win codesign installer
        if: ${{ github.event_name != 'pull_request' }}
        shell: cmd
        run: |
          packaging\windows\codesign_client.exe --debug %KLOGG_BUILD_ROOT%\packages\klogg-%KLOGG_VERSION%-%KLOGG_ARCH%-setup.exe
      
# Final upload of all packages
      - uses: actions/upload-artifact@v2
        with:
          name: packages-${{ matrix.config.os }}-${{ matrix.config.arch }}-${{ matrix.config.qt_version }}
          path: '${{ env.KLOGG_BUILD_ROOT }}/packages/*'
          if-no-files-found: error
